<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 폼인증방식에 대한 것. -->	
	<!-- <security:http>
		<security:form-login/>
	</security:http> -->
	
	<!-- 
	★ 특정 URL + 엑세스 설정
	★ pattern은 주소, 
	access는 권한이다. > 표현식(***) or 권한명
	permitAll 인증받든 안받든 전부다 access 허용한다.  
	
	인증 > Role(자격-관리자,매니저, 팀장, 담당자)
		 > Authority(권한-글쓰기, 열람, 승인) 
	 -->
	<!-- 403 처리 담당자 -->
	<bean id="customAccessDenied" class="com.test.auth.CustomAccessDeniedHandler"/>
	<!-- 로그인 성공 처리 담당자 -->
	<bean id="customLoginSuccess" class="com.test.auth.CustomLoginSuccessHandler"/> 
	<!--  암호화객체 --> 
	<!-- <bean id="customPasswordEncoder" class="com.test.auth.CustomNoOpPasswordEncoder"/> -->
	<!--  암호화객체 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- 유저 정보 객체 -->	 
	 <bean id="customUserDetailsService" class="com.test.auth.CustomUserDetailsService"></bean>
	 
	<security:http>
		<security:intercept-url pattern="/index.do"  access="permitAll"/>
		<security:intercept-url pattern="/member.do" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/admin.do"  access="hasRole('ROLE_ADMIN')"/>
		
		<security:form-login login-page="/customlogin.do" authentication-success-handler-ref="customLoginSuccess" />
		
		<!-- <security:access-denied-handler error-page="/accesserror.do" /> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃 등록 > 이래서 POST 처리가 되어서 로그아웃이 된다. -->
		<security:logout logout-url="/customlogout.do" invalidate-session="true" logout-success-url="/index.do" />
		<!-- 자동 로그인  -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="8640000" />
		
	</security:http>
	
	<!-- 인증과 관련된 것을 조작하는데 쓴다. -->
	<!-- 
	이친구들은 인증처리하는 애들이다. authentication-manager 
	provider로 인증정보 관리받는다. 
	이제 provider자체를 고쳐야 한다. -->
	
<!-- 	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userid as username, userpw as password, enabled from tbl_member where userid = ?" authorities-by-username-query="select userid username, auth authority from tbl_member_auth where userid=?"/> 
			내부적으로 preparedstatement이다.			
			<security:password-encoder ref="customPasswordEncoder" />
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
			root context에 있는 Bean을 참조한 것 
			
			<security:user-service>
				<security:user name="hong"  password="{noop}1111" authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}1111" authorities="ROLE_ADMIN,ROLE_MEMBER" />
			</security:user-service> 
			
			
		</security:authentication-provider>
	</security:authentication-manager> -->
	<!-- 방금짯던 read쿼리로 회원정보 다가져온다.
	그걸로 유저정보를 설정하는 추가업무를 구현한다. -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
